/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.31
 * Generated at: 2020-11-02 03:47:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.google.gson.Gson;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthContextAPIClient;
import org.wso2.carbon.identity.application.authentication.endpoint.util.Constants;
import org.wso2.carbon.identity.core.util.IdentityCoreConstants;
import org.wso2.carbon.identity.core.util.IdentityUtil;
import static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.STATUS;
import static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.STATUS_MSG;
import static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.CONFIGURATION_ERROR;
import static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.AUTHENTICATION_MECHANISM_NOT_CONFIGURED;
import static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.ENABLE_AUTHENTICATION_WITH_REST_API;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import java.util.ResourceBundle;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil;
import org.wso2.carbon.identity.application.authentication.endpoint.util.EncodedControl;
import java.nio.charset.StandardCharsets;
import org.apache.commons.lang.StringUtils;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil;
import org.owasp.encoder.Encode;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.provider.json.JSONProvider;
import org.apache.http.HttpStatus;
import org.owasp.encoder.Encode;
import org.wso2.carbon.identity.application.authentication.endpoint.util.client.SelfUserRegistrationResource;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil;
import org.wso2.carbon.identity.application.authentication.endpoint.util.bean.ResendCodeRequestDTO;
import org.wso2.carbon.identity.application.authentication.endpoint.util.bean.UserDTO;
import java.net.URLEncoder;
import javax.ws.rs.core.Response;
import static org.wso2.carbon.identity.core.util.IdentityUtil.isSelfSignUpEPAvailable;
import static org.wso2.carbon.identity.core.util.IdentityUtil.isRecoveryEPAvailable;
import static org.wso2.carbon.identity.core.util.IdentityUtil.isEmailUsernameEnabled;
import static org.wso2.carbon.identity.core.util.IdentityUtil.getServerURL;
import org.apache.commons.lang.StringUtils;
import org.wso2.carbon.identity.application.authentication.endpoint.util.TenantDataManager;
import java.util.List;
import org.owasp.encoder.Encode;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.provider.json.JSONProvider;
import org.apache.cxf.jaxrs.client.WebClient;
import org.apache.http.HttpStatus;
import org.owasp.encoder.Encode;
import org.wso2.carbon.identity.application.authentication.endpoint.util.client.SelfUserRegistrationResource;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil;
import org.wso2.carbon.identity.application.authentication.endpoint.util.bean.ResendCodeRequestDTO;
import org.wso2.carbon.identity.application.authentication.endpoint.util.bean.UserDTO;
import java.net.URLEncoder;
import java.net.URLDecoder;
import javax.ws.rs.core.Response;
import static org.wso2.carbon.identity.core.util.IdentityUtil.isSelfSignUpEPAvailable;
import static org.wso2.carbon.identity.core.util.IdentityUtil.isRecoveryEPAvailable;
import static org.wso2.carbon.identity.core.util.IdentityUtil.isEmailUsernameEnabled;
import static org.wso2.carbon.identity.core.util.IdentityUtil.getServerURL;
import org.apache.commons.codec.binary.Base64;
import java.nio.charset.Charset;
import org.wso2.carbon.base.ServerConfiguration;
import org.wso2.carbon.identity.application.authentication.endpoint.util.EndpointConfigManager;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


    private static final String FIDO_AUTHENTICATOR = "FIDOAuthenticator";
    private static final String IWA_AUTHENTICATOR = "IwaNTLMAuthenticator";
    private static final String IS_SAAS_APP = "isSaaSApp";
    private static final String BASIC_AUTHENTICATOR = "BasicAuthenticator";
    private static final String IDENTIFIER_EXECUTOR = "IdentifierExecutor";
    private static final String OPEN_ID_AUTHENTICATOR = "OpenIDAuthenticator";
    private static final String JWT_BASIC_AUTHENTICATOR = "JWTBasicAuthenticator";
    private static final String X509_CERTIFICATE_AUTHENTICATOR = "x509CertificateAuthenticator";


    private static final String JAVAX_SERVLET_FORWARD_REQUEST_URI = "javax.servlet.forward.request_uri";
    private static final String JAVAX_SERVLET_FORWARD_QUERY_STRING = "javax.servlet.forward.query_string";
    private static final String UTF_8 = "UTF-8";
    private static final String TENANT_DOMAIN = "tenant-domain";


        private String getRecoverAccountUrl (
            String identityMgtEndpointContext,
            String urlEncodedURL,
            boolean isUsernameRecovery,
            String urlParameters) {

            return identityMgtEndpointContext + "/recoveraccountrouter.do?" + urlParameters +
                "&isUsernameRecovery=" + isUsernameRecovery + "&callback=" + Encode.forHtmlAttribute(urlEncodedURL);
        }

        private String getRegistrationUrl (
            String identityMgtEndpointContext,
            String urlEncodedURL,
            String urlParameters) {

            return identityMgtEndpointContext + "/register.do?" + urlParameters +
                "&callback=" + Encode.forHtmlAttribute(urlEncodedURL);
        }
    

        private boolean isIdentifierFirstLogin(String inputType) {
            return "idf".equalsIgnoreCase(inputType);
        }
    
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(12);
    _jspx_dependants.put("/basicauth.jsp", Long.valueOf(1604054407000L));
    _jspx_dependants.put("/includes/login-style.jsp", Long.valueOf(1604286018000L));
    _jspx_dependants.put("/includes/product-footer.jsp", Long.valueOf(1604288050000L));
    _jspx_dependants.put("/includes/init-url.jsp", Long.valueOf(1583495516000L));
    _jspx_dependants.put("/openid.jsp", Long.valueOf(1583495516000L));
    _jspx_dependants.put("/includes/init-loginform-action-url.jsp", Long.valueOf(1583495516000L));
    _jspx_dependants.put("/includes/localize.jsp", Long.valueOf(1583495516000L));
    _jspx_dependants.put("/identifierauth.jsp", Long.valueOf(1583495516000L));
    _jspx_dependants.put("/includes/footer.jsp", Long.valueOf(1583495516000L));
    _jspx_dependants.put("/includes/product-title.jsp", Long.valueOf(1604284421000L));
    _jspx_dependants.put("/includes/header.jsp", Long.valueOf(1604055420000L));
    _jspx_dependants.put("/tenantauth.jsp", Long.valueOf(1583495516000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Arrays");
    _jspx_imports_classes.add("org.apache.commons.lang.StringUtils");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.core.util.IdentityUtil.isRecoveryEPAvailable");
    _jspx_imports_classes.add("java.net.URLDecoder");
    _jspx_imports_classes.add("org.apache.http.HttpStatus");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.core.util.IdentityUtil.isEmailUsernameEnabled");
    _jspx_imports_classes.add("org.apache.commons.codec.binary.Base64");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.bean.ResendCodeRequestDTO");
    _jspx_imports_classes.add("org.owasp.encoder.Encode");
    _jspx_imports_classes.add("java.util.ResourceBundle");
    _jspx_imports_classes.add("java.nio.charset.Charset");
    _jspx_imports_classes.add("com.google.gson.Gson");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.bean.UserDTO");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.client.SelfUserRegistrationResource");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.Constants");
    _jspx_imports_classes.add("org.apache.cxf.jaxrs.provider.json.JSONProvider");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.AuthContextAPIClient");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.core.util.IdentityUtil.isSelfSignUpEPAvailable");
    _jspx_imports_classes.add("org.apache.cxf.jaxrs.client.WebClient");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.EndpointConfigManager");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.STATUS_MSG");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.EncodedControl");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.AUTHENTICATION_MECHANISM_NOT_CONFIGURED");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("java.nio.charset.StandardCharsets");
    _jspx_imports_classes.add("org.apache.cxf.jaxrs.client.JAXRSClientFactory");
    _jspx_imports_classes.add("org.wso2.carbon.base.ServerConfiguration");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.ENABLE_AUTHENTICATION_WITH_REST_API");
    _jspx_imports_classes.add("java.net.URLEncoder");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.wso2.carbon.identity.core.util.IdentityCoreConstants");
    _jspx_imports_classes.add("javax.ws.rs.core.Response");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.CONFIGURATION_ERROR");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.TenantDataManager");
    _jspx_imports_classes.add("org.wso2.carbon.identity.core.util.IdentityUtil");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.core.util.IdentityUtil.getServerURL");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.STATUS");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    String BUNDLE = "org.wso2.carbon.identity.application.authentication.endpoint.i18n.Resources";
    ResourceBundle resourceBundle = ResourceBundle.getBundle(BUNDLE, request.getLocale(), new
            EncodedControl(StandardCharsets.UTF_8.toString()));

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');

    String identityServerEndpointContextParam = application.getInitParameter("IdentityServerEndpointContextURL");
    String samlssoURL = "../samlsso";
    String commonauthURL = "../commonauth";
    String oauth2AuthorizeURL = "../oauth2/authorize";
    String oidcLogoutURL = "../oidc/logout";
    String openidServerURL = "../openidserver";
    if (StringUtils.isNotBlank(identityServerEndpointContextParam)) {
        samlssoURL = identityServerEndpointContextParam + "/samlsso";
        commonauthURL = identityServerEndpointContextParam + "/commonauth";
        oauth2AuthorizeURL = identityServerEndpointContextParam + "/oauth2/authorize";
        oidcLogoutURL = identityServerEndpointContextParam + "/oidc/logout";
        openidServerURL = identityServerEndpointContextParam + "/oidc/logout";
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');

    request.getSession().invalidate();
    String queryString = request.getQueryString();
    Map<String, String> idpAuthenticatorMapping = null;
    if (request.getAttribute(Constants.IDP_AUTHENTICATOR_MAP) != null) {
        idpAuthenticatorMapping = (Map<String, String>) request.getAttribute(Constants.IDP_AUTHENTICATOR_MAP);
    }

    String errorMessage = "authentication.failed.please.retry";
    String errorCode = "";
    if(request.getParameter(Constants.ERROR_CODE)!=null){
        errorCode = request.getParameter(Constants.ERROR_CODE) ;
    }
    String loginFailed = "false";

    if (Boolean.parseBoolean(request.getParameter(Constants.AUTH_FAILURE))) {
        loginFailed = "true";
        String error = request.getParameter(Constants.AUTH_FAILURE_MSG);
        if (error != null && !error.isEmpty()) {
            errorMessage = error;
        }
    }

      out.write('\n');

    boolean hasLocalLoginOptions = false;
    boolean isBackChannelBasicAuth = false;
    List<String> localAuthenticatorNames = new ArrayList<String>();

    if (idpAuthenticatorMapping != null && idpAuthenticatorMapping.get(Constants.RESIDENT_IDP_RESERVED_NAME) != null) {
        String authList = idpAuthenticatorMapping.get(Constants.RESIDENT_IDP_RESERVED_NAME);
        if (authList != null) {
            localAuthenticatorNames = Arrays.asList(authList.split(","));
        }
    }

      out.write('\n');

    boolean reCaptchaEnabled = false;
    if (request.getParameter("reCaptcha") != null && "TRUE".equalsIgnoreCase(request.getParameter("reCaptcha"))) {
        reCaptchaEnabled = true;
    }

      out.write('\n');

    String inputType = request.getParameter("inputType");
    String username = null;

    if (isIdentifierFirstLogin(inputType)) {
        String authAPIURL = application.getInitParameter(Constants.AUTHENTICATION_REST_ENDPOINT_URL);
        if (StringUtils.isBlank(authAPIURL)) {
            authAPIURL = IdentityUtil.getServerURL("/api/identity/auth/v1.1/", true, true);
        }
        if (!authAPIURL.endsWith("/")) {
            authAPIURL += "/";
        }
        authAPIURL += "context/" + request.getParameter("sessionDataKey");
        String contextProperties = AuthContextAPIClient.getContextProperties(authAPIURL);
        Gson gson = new Gson();
        Map<String, Object> parameters = gson.fromJson(contextProperties, Map.class);
        if (parameters != null) {
            username = (String) parameters.get("username");
        } else {
            String redirectURL = "error.do";
            response.sendRedirect(redirectURL);
        }
    }

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!doctype html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <!-- header -->\n");
      out.write("    ");

        File headerFile = new File(getServletContext().getRealPath("extensions/product-title.jsp"));
        if (headerFile.exists()) {
    
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/header.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } else { 
      out.write("\n");
      out.write("        ");
      out.write("\n");
      out.write("\n");
      out.write("<!-- localize.jsp MUST already be included in the calling script -->\n");
      out.write("\n");
      out.write("\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n");
      out.write("<meta charset=\"utf-8\">\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("\n");
      out.write("<link rel=\"icon\" href=\"libs/theme/assets/images/favicon.ico\" type=\"image/x-icon\"/>\n");
      out.write("<link href=\"libs/theme/wso2-default.min.css\" rel=\"stylesheet\">\n");
      out.write("\n");
      out.write("<title>");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "wso2.identity.server"));
      out.write("</title>\n");
      out.write("\n");
      out.write("<style>\n");
      out.write("    html, body {\n");
      out.write("        height: 100%;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    body {\n");
      out.write("        flex-direction: column;\n");
      out.write("        display: flex;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    main {\n");
      out.write("        flex-shrink: 0;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    main.center-segment {\n");
      out.write("        margin: auto;\n");
      out.write("        display: flex;\n");
      out.write("        align-items: center;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    main.center-segment > .ui.container.medium {\n");
      out.write("        max-width: 450px !important;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    main.center-segment > .ui.container.large {\n");
      out.write("        max-width: 700px !important;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    main.center-segment > .ui.container > .ui.segment {\n");
      out.write("        padding: 3rem;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    main.center-segment > .ui.container > .ui.segment .segment-form .buttons {\n");
      out.write("        margin-top: 1em;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    main.center-segment > .ui.container > .ui.segment .segment-form .buttons.align-right button,\n");
      out.write("    main.center-segment > .ui.container > .ui.segment .segment-form .buttons.align-right input {\n");
      out.write("        margin: 0 0 0 0.25em;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    main.center-segment > .ui.container > .ui.segment .segment-form .column .buttons.align-left button.link-button,\n");
      out.write("    main.center-segment > .ui.container > .ui.segment .segment-form .column .buttons.align-left input.link-button {\n");
      out.write("        padding: .78571429em 1.5em .78571429em 0;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    main.center-segment > .ui.container > .ui.segment .segment-form {\n");
      out.write("        text-align: left;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    main.center-segment > .ui.container > .ui.segment .segment-form .align-center {\n");
      out.write("        text-align: center;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    main.center-segment > .ui.container > .ui.segment .segment-form .align-right {\n");
      out.write("        text-align: right;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .cookie-policy-message {\n");
      out.write("        font-size: 14px;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    footer {\n");
      out.write("        padding: 2rem 0;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    body .product-title .product-title-text {\n");
      out.write("        margin: 0;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    body .center-segment .product-title .product-title-text {\n");
      out.write("        margin-top: 2em;\n");
      out.write("        margin-bottom: 1em;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.menu.fixed.app-header .product-logo {\n");
      out.write("        padding-left: 0;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Table of content styling */\n");
      out.write("\n");
      out.write("    main #toc {\n");
      out.write("        position: sticky;\n");
      out.write("        top: 93px;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    main .ui.segment.toc {\n");
      out.write("        padding: 20px;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    main .ui.segment.toc ul.ui.list.nav > li.sub {\n");
      out.write("        margin-left: 20px;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    main .ui.segment.toc ul.ui.list.nav > li > a {\n");
      out.write("        color: rgba(0,0,0,.87);\n");
      out.write("        text-decoration: none;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    main .ui.segment.toc ul.ui.list.nav > li:before {\n");
      out.write("        content: \"\\2219\";\n");
      out.write("        font-weight: bold;\n");
      out.write("        font-size: 1.6em;\n");
      out.write("        line-height: 0.5em;\n");
      out.write("        display: inline-block;\n");
      out.write("        width: 1em;\n");
      out.write("        margin-left: -0.7em;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    main .ui.segment.toc ul.ui.list.nav > li.sub:before {\n");
      out.write("        content: \"\\2192\";\n");
      out.write("        margin-left: -w1em;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    main .ui.segment.toc ul.ui.list.nav > li:hover a {\n");
      out.write("        color: #ff5000;\n");
      out.write("        text-decoration: none;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    main .ui.segment.toc ul.ui.list.nav > li:hover:before {\n");
      out.write("        color: #ff5000;\n");
      out.write("    }\n");
      out.write("</style>\n");
      out.write("\n");
      out.write("<script src=\"libs/jquery_3.4.1/jquery-3.4.1.js\"></script>\n");
      out.write("\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("    ");

        if (reCaptchaEnabled) {
    
      out.write("\n");
      out.write("        <script src='");
      out.print((Encode.forJavaScriptSource(request.getParameter("reCaptchaAPI"))));
      out.write("'></script>\n");
      out.write("    ");

        }
    
      out.write("\n");
      out.write("</head>\n");
      out.write("<body onload=\"checkSessionKey()\">\n");
      out.write("    <!-- text-translate -->\n");
      out.write("    <div class=\"right-segment\">\n");
      out.write("        <a href=\"#\">Tiếng Việt</a>\n");
      out.write("    </div>\n");
      out.write("    <main class=\"center-segment\">\n");
      out.write("\n");
      out.write("        <div class=\"ui container medium center aligned middle aligned\">\n");
      out.write("            <!-- product-title -->\n");
      out.write("            ");

                File productTitleFile = new File(getServletContext().getRealPath("extensions/product-title.jsp"));
                if (productTitleFile.exists()) {
            
      out.write("\n");
      out.write("                ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/product-title.jsp", out, false);
      out.write("\n");
      out.write("            ");
 } else { 
      out.write("\n");
      out.write("                ");
      out.write("\n");
      out.write("\n");
      out.write("<!-- localize.jsp MUST already be included in the calling script -->\n");
      out.write("\n");
      out.write("\n");
      out.write("<div class=\"product-title\">\n");
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("            ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("            <div class=\"ui segment\">\n");
      out.write("                <h3 class=\"ui header\">\n");
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("                        ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "wso2.identity.server"));
      out.write('\n');
      out.write("\n");
      out.write("                </h3>\n");
      out.write("\n");
      out.write("                <div class=\"segment-form\">\n");
      out.write("                    ");

                        if (localAuthenticatorNames.size() > 0) {
                            if (localAuthenticatorNames.contains(OPEN_ID_AUTHENTICATOR)) {
                                hasLocalLoginOptions = true;
                    
      out.write("\n");
      out.write("                        ");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<form action=\"");
      out.print(commonauthURL);
      out.write("\" method=\"post\" id=\"loginForm\" class=\"segment-form\">\n");
      out.write("    ");

        loginFailed = request.getParameter("loginFailed");
        if (loginFailed != null) {

    
      out.write("\n");
      out.write("    <div class=\"ui visible negative message\">\n");
      out.write("         ");
      out.print(AuthenticationEndpointUtil.i18nBase64(resourceBundle,request.getParameter("errorMessage")));
      out.write("\n");
      out.write("    </div>\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("    <div class=\"field\">\n");
      out.write("        <input type=\"text\" id=\"claimed_id\" name=\"claimed_id\" size='30'\n");
      out.write("               placeholder=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "openid"));
      out.write("\"/>\n");
      out.write("        <input type=\"hidden\" name=\"sessionDataKey\"\n");
      out.write("               value='");
      out.print(Encode.forHtmlAttribute(request.getParameter("sessionDataKey")));
      out.write("'/>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <div class=\"field\">\n");
      out.write("        <div class=\"ui checkbox\">\n");
      out.write("            <input type=\"checkbox\" id=\"chkRemember\" name=\"chkRemember\">\n");
      out.write("            <label>");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "remember.me"));
      out.write("</label>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <div class=\"buttons right aligned\">\n");
      out.write("        <button\n");
      out.write("            class=\"ui primary large button\"\n");
      out.write("            type=\"submit\">\n");
      out.write("            ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "login"));
      out.write("\n");
      out.write("        </button>\n");
      out.write("    </div>\n");
      out.write("</form>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("\n");
      out.write("    // Handle form submission preventing double submission.\n");
      out.write("    $(document).ready(function(){\n");
      out.write("        $.fn.preventDoubleSubmission = function() {\n");
      out.write("            $(this).on('submit',function(e){\n");
      out.write("                var $form = $(this);\n");
      out.write("                if ($form.data('submitted') === true) {\n");
      out.write("                    // Previously submitted - don't submit again.\n");
      out.write("                    e.preventDefault();\n");
      out.write("                    console.warn(\"Prevented a possible double submit event\");\n");
      out.write("                } else {\n");
      out.write("                    // Mark it so that the next submit can be ignored.\n");
      out.write("                    $form.data('submitted', true);\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            return this;\n");
      out.write("        };\n");
      out.write("        $('#loginForm').preventDoubleSubmission();\n");
      out.write("    });\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("                    ");

                        } else if (localAuthenticatorNames.contains(IDENTIFIER_EXECUTOR)) {
                            hasLocalLoginOptions = true;
                    
      out.write("\n");
      out.write("                        ");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');

    String loginFormActionURL;

    if (isBackChannelBasicAuth) {
        loginFormActionURL = "authenticate.do";
        if (StringUtils.isNotBlank(queryString)) {
            loginFormActionURL = loginFormActionURL + "?" + queryString;
        }
    } else {
        String type = request.getParameter("type");
        if ("samlsso".equals(type)) {
            loginFormActionURL = samlssoURL;
        } else if ("oauth2".equals(type)){
            loginFormActionURL = oauth2AuthorizeURL;
        } else {
            loginFormActionURL = commonauthURL;
        }
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');

    String emailUsernameEnable = application.getInitParameter("EnableEmailUserName");
    Boolean isEmailUsernameEnabled = false;

    if (StringUtils.isNotBlank(emailUsernameEnable)) {
        isEmailUsernameEnabled = Boolean.valueOf(emailUsernameEnable);
    } else {
        isEmailUsernameEnabled = isEmailUsernameEnabled();
    }

      out.write("\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("    function submitIdentifier () {\n");
      out.write("        var isEmailUsernameEnabled = JSON.parse(\"");
      out.print( isEmailUsernameEnabled );
      out.write("\");\n");
      out.write("        var tenantName = getParameterByName(\"tenantDomain\");\n");
      out.write("        var userName = document.getElementById(\"username\");\n");
      out.write("        var usernameUserInput = document.getElementById(\"usernameUserInput\");\n");
      out.write("\n");
      out.write("        if (getParameterByName(\"isSaaSApp\") === \"false\") {\n");
      out.write("            \n");
      out.write("            if ((!isEmailUsernameEnabled) && (usernameUserInputValue.split(\"@\").length > 1)) {\n");
      out.write("                userName.value = usernameUserInputValue;\n");
      out.write("            }\n");
      out.write("            else {\n");
      out.write("                userName.value = usernameUserInputValue + \"@\" + tenantName;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        else {\n");
      out.write("            userName.value = usernameUserInputValue;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        if (username.value) {\n");
      out.write("            document.getElementById(\"identifierForm\").submit();\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<form class=\"ui large form\" action=\"");
      out.print(loginFormActionURL);
      out.write("\" method=\"post\" id=\"identifierForm\">\n");
      out.write("    ");

        if (loginFormActionURL.equals(samlssoURL) || loginFormActionURL.equals(oauth2AuthorizeURL)) {
    
      out.write("\n");
      out.write("    <input id=\"tocommonauth\" name=\"tocommonauth\" type=\"hidden\" value=\"true\">\n");
      out.write("    ");

        }
    
      out.write("\n");
      out.write("    ");
 if (Boolean.parseBoolean(loginFailed)) { 
      out.write("\n");
      out.write("    <div class=\"ui visible negative message\" id=\"error-msg\">\n");
      out.write("        ");
      out.print( AuthenticationEndpointUtil.i18n(resourceBundle, errorMessage) );
      out.write("\n");
      out.write("    </div>\n");
      out.write("    ");
 } else if((Boolean.TRUE.toString()).equals(request.getParameter("authz_failure"))) { 
      out.write("\n");
      out.write("    <div class=\"ui visible negative message\" id=\"error-msg\">\n");
      out.write("        ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "unauthorized.to.login"));
      out.write("\n");
      out.write("    </div>\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("    \n");
      out.write("    <div class=\"field\">\n");
      out.write("        <div class=\"ui fluid left icon input\">\n");
      out.write("            <input\n");
      out.write("                type=\"text\"\n");
      out.write("                id=\"usernameUserInput\"\n");
      out.write("                value=\"\"\n");
      out.write("                name=\"usernameUserInput\"\n");
      out.write("                tabindex=\"0\"\n");
      out.write("                placeholder=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "username"));
      out.write("\"\n");
      out.write("                required />\n");
      out.write("            <i aria-hidden=\"true\" class=\"user icon\"></i>\n");
      out.write("        </div>\n");
      out.write("        <input id=\"username\" name=\"username\" type=\"hidden\" value=\"\">\n");
      out.write("        <input id=\"authType\" name=\"authType\" type=\"hidden\" value=\"idf\">\n");
      out.write("    </div>\n");
      out.write("    ");

        if (reCaptchaEnabled) {
    
      out.write("\n");
      out.write("    <div class=\"field\">\n");
      out.write("        <div class=\"g-recaptcha\"\n");
      out.write("             data-sitekey=\"");
      out.print(Encode.forHtmlContent(request.getParameter("reCaptchaKey")));
      out.write("\">\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("    ");

        }
    
      out.write("\n");
      out.write("\n");
      out.write("    <input type=\"hidden\" name=\"sessionDataKey\" value='");
      out.print(Encode.forHtmlAttribute
        (request.getParameter("sessionDataKey")));
      out.write("'/>\n");
      out.write("\n");
      out.write("    ");

        String recoveryEPAvailable = application.getInitParameter("EnableRecoveryEndpoint");
        String enableSelfSignUpEndpoint = application.getInitParameter("EnableSelfSignUpEndpoint");
        Boolean isRecoveryEPAvailable = false;
        Boolean isSelfSignUpEPAvailable = false;
        String identityMgtEndpointContext = "";
        String urlEncodedURL = "";
        String urlParameters = "";
        
        if (StringUtils.isNotBlank(recoveryEPAvailable)) {
            isRecoveryEPAvailable = Boolean.valueOf(recoveryEPAvailable);
        } else {
            isRecoveryEPAvailable = isRecoveryEPAvailable();
        }
        
        if (StringUtils.isNotBlank(enableSelfSignUpEndpoint)) {
            isSelfSignUpEPAvailable = Boolean.valueOf(enableSelfSignUpEndpoint);
        } else {
            isSelfSignUpEPAvailable = isSelfSignUpEPAvailable();
        }
  
        if (isRecoveryEPAvailable || isSelfSignUpEPAvailable) {
            String scheme = request.getScheme();
            String serverName = request.getServerName();
            int serverPort = request.getServerPort();
            String uri = (String) request.getAttribute(JAVAX_SERVLET_FORWARD_REQUEST_URI);
            String prmstr = (String) request.getAttribute(JAVAX_SERVLET_FORWARD_QUERY_STRING);
            String urlWithoutEncoding = scheme + "://" +serverName + ":" + serverPort + uri + "?" + prmstr;

            urlEncodedURL = URLEncoder.encode(urlWithoutEncoding, UTF_8);
            urlParameters = prmstr;
            
            identityMgtEndpointContext =
                    application.getInitParameter("IdentityManagementEndpointContextURL");
            if (StringUtils.isBlank(identityMgtEndpointContext)) {
                identityMgtEndpointContext = getServerURL("/accountrecoveryendpoint", true, true);
            }
        }
    
      out.write("\n");
      out.write("\n");
      out.write("    ");
 if (isSelfSignUpEPAvailable) { 
      out.write("\n");
      out.write("        <div class=\"field\">\n");
      out.write("            <a id=\"usernameRecoverLink\" href=\"");
      out.print(getRecoverAccountUrl(identityMgtEndpointContext, urlEncodedURL, true, urlParameters));
      out.write("\">\n");
      out.write("                ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "forgot.username.password"));
      out.write("\n");
      out.write("                ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "forgot.username"));
      out.write(" ?\n");
      out.write("            </a>\n");
      out.write("        </div>\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("    <div class=\"ui two column stackable grid\">\n");
      out.write("        <div class=\"column align-left buttons\">\n");
      out.write("            ");
 if (isRecoveryEPAvailable) { 
      out.write("\n");
      out.write("            <input\n");
      out.write("                type=\"button\"\n");
      out.write("                onclick=\"window.location.href='");
      out.print(getRegistrationUrl(identityMgtEndpointContext, urlEncodedURL, urlParameters));
      out.write("';\"\n");
      out.write("                class=\"ui large button link-button\"\n");
      out.write("                id=\"registerLink\"\n");
      out.write("                role=\"button\"\n");
      out.write("                value=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "create.account"));
      out.write("\" />\n");
      out.write("            ");
 } 
      out.write("\n");
      out.write("        </div>\n");
      out.write("        <div class=\"column align-right buttons\">\n");
      out.write("            <input\n");
      out.write("                type=\"submit\"\n");
      out.write("                onclick=\"submitIdentifier()\"\n");
      out.write("                class=\"ui primary large button\"\n");
      out.write("                role=\"button\"\n");
      out.write("                value=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "continue"));
      out.write("\" />\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("</form>\n");
      out.write("\n");
      out.write("                    ");

                        } else if (localAuthenticatorNames.contains(JWT_BASIC_AUTHENTICATOR) ||
                            localAuthenticatorNames.contains(BASIC_AUTHENTICATOR)) {
                            hasLocalLoginOptions = true;
                            boolean includeBasicAuth = true;
                            if (localAuthenticatorNames.contains(JWT_BASIC_AUTHENTICATOR)) {
                                if (Boolean.parseBoolean(application.getInitParameter(ENABLE_AUTHENTICATION_WITH_REST_API))) {
                                    isBackChannelBasicAuth = true;
                                } else {
                                    String redirectURL = "error.do?" + STATUS + "=" + CONFIGURATION_ERROR + "&" +
                                            STATUS_MSG + "=" + AUTHENTICATION_MECHANISM_NOT_CONFIGURED;
                                    response.sendRedirect(redirectURL);
                                }
                            } else if (localAuthenticatorNames.contains(BASIC_AUTHENTICATOR)) {
                                isBackChannelBasicAuth = false;
                            if (TenantDataManager.isTenantListEnabled() && Boolean.parseBoolean(request.getParameter(IS_SAAS_APP))) {
                                includeBasicAuth = false;
                    
      out.write("\n");
      out.write("                                ");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<form class=\"ui large form\" action=\"");
      out.print(commonauthURL);
      out.write("\" method=\"post\" id=\"loginForm\">\n");
      out.write("    ");
 if (Boolean.parseBoolean(loginFailed)) { 
      out.write("\n");
      out.write("    <div class=\"ui visible negative message\" id=\"error-msg\">\n");
      out.write("        ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "username.or.password.invalid"));
      out.write("\n");
      out.write("    </div>\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("    <div class=\"field\">\n");
      out.write("        <select class=\"ui fluid dropdown\" id='tenantList' name=\"tenantList\" size='1'>\n");
      out.write("            <option value=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "select.tenant.dropdown.display.name"));
      out.write("\">\n");
      out.write("                ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "select.tenant.dropdown.display.name"));
      out.write("\n");
      out.write("            </option>\n");
      out.write("            <option value=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "super.tenant"));
      out.write("\">\n");
      out.write("                ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "super.tenant.display.name"));
      out.write("\n");
      out.write("            </option>\n");
      out.write("            ");

                List<String> tenantDomainsList = TenantDataManager.getAllActiveTenantDomains();
                if (!tenantDomainsList.isEmpty()) {
                    for (String tenant : tenantDomainsList) {
            
      out.write("\n");
      out.write("            <option value=\"");
      out.print(Encode.forHtmlAttribute(tenant));
      out.write('"');
      out.write('>');
      out.print(Encode.forHtmlContent(tenant));
      out.write("</option>\n");
      out.write("            ");

                    }
                }
            
      out.write("\n");
      out.write("        </select>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <input type=\"hidden\" id='username' name='username'/>\n");
      out.write("\n");
      out.write("    <div class=\"field\">\n");
      out.write("        <div class=\"ui fluid left icon input\">\n");
      out.write("            <input\n");
      out.write("                type=\"text\"\n");
      out.write("                id=\"username_tmp\"\n");
      out.write("                value=\"\"\n");
      out.write("                name=\"username_tmp\"\n");
      out.write("                tabindex=\"0\"\n");
      out.write("                placeholder=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "username"));
      out.write("\"\n");
      out.write("                required>\n");
      out.write("            <i aria-hidden=\"true\" class=\"user icon\"></i>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <div class=\"field\">\n");
      out.write("        <div class=\"ui fluid left icon input\">\n");
      out.write("            <input\n");
      out.write("                type=\"password\"\n");
      out.write("                id=\"password\"\n");
      out.write("                name=\"password\"\n");
      out.write("                value=\"\"\n");
      out.write("                autocomplete=\"off\"\n");
      out.write("                placeholder=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "password"));
      out.write("\">\n");
      out.write("            <i aria-hidden=\"true\" class=\"lock icon\"></i>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <input type=\"hidden\" name=\"sessionDataKey\" value='");
      out.print(Encode.forHtmlAttribute(request.getParameter("sessionDataKey")));
      out.write("'/>\n");
      out.write("\n");
      out.write("    ");

        String recoveryEPAvailable = application.getInitParameter("EnableRecoveryEndpoint");
        String enableSelfSignUpEndpoint = application.getInitParameter("EnableSelfSignUpEndpoint");
        Boolean isRecoveryEPAvailable = false;
        Boolean isSelfSignUpEPAvailable = false;
        String identityMgtEndpointContext = "";
        String urlEncodedURL = "";
        String urlParameters = "";

        if (StringUtils.isNotBlank(recoveryEPAvailable)) {
            isRecoveryEPAvailable = Boolean.valueOf(recoveryEPAvailable);
        } else {
            isRecoveryEPAvailable = isRecoveryEPAvailable();
        }

        if (StringUtils.isNotBlank(enableSelfSignUpEndpoint)) {
            isSelfSignUpEPAvailable = Boolean.valueOf(enableSelfSignUpEndpoint);
        } else {
            isSelfSignUpEPAvailable = isSelfSignUpEPAvailable();
        }

        if (isRecoveryEPAvailable || isSelfSignUpEPAvailable) {
            String scheme = request.getScheme();
            String serverName = request.getServerName();
            int serverPort = request.getServerPort();
            String uri = (String) request.getAttribute(JAVAX_SERVLET_FORWARD_REQUEST_URI);
            String prmstr = URLDecoder.decode(((String) request.getAttribute(JAVAX_SERVLET_FORWARD_QUERY_STRING)), UTF_8);
            String urlWithoutEncoding = scheme + "://" +serverName + ":" + serverPort + uri + "?" + prmstr;

            urlEncodedURL = URLEncoder.encode(urlWithoutEncoding, UTF_8);
            urlParameters = prmstr;

            identityMgtEndpointContext =
                    application.getInitParameter("IdentityManagementEndpointContextURL");
            if (StringUtils.isBlank(identityMgtEndpointContext)) {
                identityMgtEndpointContext = getServerURL("/accountrecoveryendpoint", true, true);
            }
        } 
    
      out.write("\n");
      out.write("\n");
      out.write("    <div class=\"field\">\n");
      out.write("        <div class=\"ui checkbox\">\n");
      out.write("            <input type=\"checkbox\" id=\"chkRemember\" name=\"chkRemember\">\n");
      out.write("            <label>");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "remember.me"));
      out.write("</label>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <div class=\"ui two column stackable grid\">\n");
      out.write("        ");
 if(request.getParameter("relyingParty").equals("wso2.my.dashboard")) { 
      out.write("\n");
      out.write("        <div class=\"column align-left buttons\">\n");
      out.write("            ");
 if (isSelfSignUpEPAvailable && !isIdentifierFirstLogin(inputType)) { 
      out.write("\n");
      out.write("            <button\n");
      out.write("                type=\"submit\"\n");
      out.write("                onclick=\"window.location.href='");
      out.print(getRegistrationUrl(identityMgtEndpointContext, urlEncodedURL, urlParameters));
      out.write("';\"   \n");
      out.write("                class=\"ui large button link-button\"\n");
      out.write("                id=\"registerLink\"\n");
      out.write("                role=\"button\">\n");
      out.write("                    ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "create.account"));
      out.write("\n");
      out.write("            </button>\n");
      out.write("            ");
 } 
      out.write("\n");
      out.write("        </div>\n");
      out.write("        ");
 } 
      out.write("\n");
      out.write("        <div class=\"column align-right buttons\">\n");
      out.write("            <button\n");
      out.write("                type=\"submit\"\n");
      out.write("                onclick=\"appendTenantDomain();\"    \n");
      out.write("                class=\"ui primary large button\"\n");
      out.write("                role=\"button\">\n");
      out.write("                    ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "continue"));
      out.write("\n");
      out.write("            </button>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("    \n");
      out.write("</form>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("\n");
      out.write("    /**\n");
      out.write("     * Append the tenant domain to the username\n");
      out.write("     */\n");
      out.write("        function appendTenantDomain() {\n");
      out.write("        var element = document.getElementById(\"tenantList\");\n");
      out.write("        var tenantDomain = element.options[element.selectedIndex].value;\n");
      out.write("\n");
      out.write("        setSelectedTenantCookie(tenantDomain, 30);\n");
      out.write("\n");
      out.write("        if (tenantDomain != \"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle,"select.tenant.dropdown.display.name"));
      out.write("\") {\n");
      out.write("\n");
      out.write("            var username = document.getElementsByName(\"username_tmp\")[0].value;\n");
      out.write("            var userWithDomain = username + \"@\" + tenantDomain;\n");
      out.write("\n");
      out.write("            document.getElementsByName(\"username\")[0].value = userWithDomain;\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /**\n");
      out.write("     * Write the selected tenant domain to the cookie\n");
      out.write("     */\n");
      out.write("    function setSelectedTenantCookie(cvalue, exdays) {\n");
      out.write("        var date = new Date();\n");
      out.write("        date.setTime(date.getTime() + (exdays * 24 * 60 * 60 * 1000));\n");
      out.write("        var expires = \"expires=\" + date.toUTCString();\n");
      out.write("        document.cookie = \"selectedTenantDomain=\" + cvalue + \"; \" + expires + \"; secure\";\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /**\n");
      out.write("     * Get the previously selected tenant domain from the cookie\n");
      out.write("     */\n");
      out.write("    function getSelectedTenantCookie() {\n");
      out.write("        var selectedTenantDomain = \"\";\n");
      out.write("        var name = \"selectedTenantDomain=\";\n");
      out.write("        var cookieItems = document.cookie.split(';');\n");
      out.write("\n");
      out.write("        for (var i = 0; i < cookieItems.length; i++) {\n");
      out.write("            var item = cookieItems[i];\n");
      out.write("            item = item.trim();\n");
      out.write("\n");
      out.write("            if (item.indexOf(name) != -1) {\n");
      out.write("                selectedTenantDomain = item.substring(name.length, item.length);\n");
      out.write("                break;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        return selectedTenantDomain;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /**\n");
      out.write("     * Select the tenant domain based on the previously selected tenant domain in cookie\n");
      out.write("     */\n");
      out.write("    function selectTenantFromCookie() {\n");
      out.write("        var tenant = getSelectedTenantCookie();\n");
      out.write("        var element = document.getElementById(\"tenantList\");\n");
      out.write("\n");
      out.write("        for (var i = 0; i < element.options.length; i++) {\n");
      out.write("            if (element.options[i].value == tenant) {\n");
      out.write("                element.value = tenant;\n");
      out.write("                break;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        //remove super tenant from dropdown based on the properties\n");
      out.write("        var superTenant = \"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle,"super.tenant"));
      out.write("\";\n");
      out.write("        if (superTenant == null || superTenant == \"\") {\n");
      out.write("            for (i = 0; i < element.options.length; i++) {\n");
      out.write("                if (element.options[i].value == superTenant) {\n");
      out.write("                    element.remove(i);\n");
      out.write("                    break;\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // Handle form submission preventing double submission.\n");
      out.write("    $(document).ready(function(){\n");
      out.write("        $.fn.preventDoubleSubmission = function() {\n");
      out.write("            $(this).on('submit',function(e){\n");
      out.write("                var $form = $(this);\n");
      out.write("                if ($form.data('submitted') === true) {\n");
      out.write("                    // Previously submitted - don't submit again.\n");
      out.write("                    e.preventDefault();\n");
      out.write("                    console.warn(\"Prevented a possible double submit event\");\n");
      out.write("                } else {\n");
      out.write("                    // Mark it so that the next submit can be ignored.\n");
      out.write("                    $form.data('submitted', true);\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            return this;\n");
      out.write("        };\n");
      out.write("        $('#loginForm').preventDoubleSubmission();\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    $('select.dropdown').dropdown();\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("                    ");

                            }
                        }

                                if (includeBasicAuth) {
                                    
      out.write("\n");
      out.write("                                        ");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');

    String loginFormActionURL;

    if (isBackChannelBasicAuth) {
        loginFormActionURL = "authenticate.do";
        if (StringUtils.isNotBlank(queryString)) {
            loginFormActionURL = loginFormActionURL + "?" + queryString;
        }
    } else {
        String type = request.getParameter("type");
        if ("samlsso".equals(type)) {
            loginFormActionURL = samlssoURL;
        } else if ("oauth2".equals(type)){
            loginFormActionURL = oauth2AuthorizeURL;
        } else {
            loginFormActionURL = commonauthURL;
        }
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');

    String emailUsernameEnable = application.getInitParameter("EnableEmailUserName");
    Boolean isEmailUsernameEnabled = false;

    if (StringUtils.isNotBlank(emailUsernameEnable)) {
        isEmailUsernameEnabled = Boolean.valueOf(emailUsernameEnable);
    } else {
        isEmailUsernameEnabled = isEmailUsernameEnabled();
    }

      out.write("\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("    function goBack() {\n");
      out.write("        window.history.back();\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // Handle form submission preventing double submission.\n");
      out.write("    $(document).ready(function(){\n");
      out.write("        $.fn.preventDoubleSubmission = function() {\n");
      out.write("            $(this).on('submit',function(e){\n");
      out.write("                var $form = $(this);\n");
      out.write("                if ($form.data('submitted') === true) {\n");
      out.write("                    // Previously submitted - don't submit again.\n");
      out.write("                    e.preventDefault();\n");
      out.write("                    console.warn(\"Prevented a possible double submit event\");\n");
      out.write("                } else {\n");
      out.write("                    e.preventDefault();\n");
      out.write("\n");
      out.write("                    var isEmailUsernameEnabled = JSON.parse(\"");
      out.print( isEmailUsernameEnabled );
      out.write("\");\n");
      out.write("                    var tenantName = getParameterByName(\"tenantDomain\");\n");
      out.write("                    var userName = document.getElementById(\"username\");\n");
      out.write("                    var usernameUserInput = document.getElementById(\"usernameUserInput\");\n");
      out.write("\n");
      out.write("                    if (usernameUserInput) {\n");
      out.write("                        var usernameUserInputValue = usernameUserInput.value.trim();\n");
      out.write("\n");
      out.write("                        if (getParameterByName(\"isSaaSApp\") === \"false\") {\n");
      out.write("\n");
      out.write("                            if ((!isEmailUsernameEnabled) && (usernameUserInputValue.split(\"@\").length > 1)) {\n");
      out.write("                                userName.value = usernameUserInputValue;\n");
      out.write("                            }\n");
      out.write("                            else {\n");
      out.write("                                userName.value = usernameUserInputValue + \"@\" + tenantName;\n");
      out.write("                            }\n");
      out.write("                        }\n");
      out.write("                        else {\n");
      out.write("                            userName.value = usernameUserInputValue;\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    if (userName.value) {\n");
      out.write("                        $.ajax({\n");
      out.write("                            type: \"GET\",\n");
      out.write("                            url: \"/logincontext?sessionDataKey=\" + getParameterByName(\"sessionDataKey\") +\n");
      out.write("                                \"&relyingParty=\" + getParameterByName(\"relyingParty\") + \"&tenantDomain=\" + tenantName,\n");
      out.write("                            success: function (data) {\n");
      out.write("                                if (data && data.status == 'redirect' && data.redirectUrl && data.redirectUrl.length > 0) {\n");
      out.write("                                    window.location.href = data.redirectUrl;\n");
      out.write("                                } else {\n");
      out.write("                                    // Mark it so that the next submit can be ignored.\n");
      out.write("                                    $form.data('submitted', true);\n");
      out.write("                                    document.getElementById(\"loginForm\").submit();\n");
      out.write("                                }\n");
      out.write("                            },\n");
      out.write("                            cache: false\n");
      out.write("                        });\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            return this;\n");
      out.write("        };\n");
      out.write("        $('#loginForm').preventDoubleSubmission();\n");
      out.write("    });\n");
      out.write("</script>\n");
      out.write("\n");
      out.write('\n');

    String resendUsername = request.getParameter("resend_username");
    if (StringUtils.isNotBlank(resendUsername)) {

        ResendCodeRequestDTO selfRegistrationRequest = new ResendCodeRequestDTO();
        UserDTO userDTO = AuthenticationEndpointUtil.getUser(resendUsername);
        selfRegistrationRequest.setUser(userDTO);

        String path = config.getServletContext().getInitParameter(Constants.ACCOUNT_RECOVERY_REST_ENDPOINT_URL);
        String proxyContextPath = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants
                .PROXY_CONTEXT_PATH);
        if (proxyContextPath == null) {
            proxyContextPath = "";
        }
        String url;
        if (StringUtils.isNotBlank(EndpointConfigManager.getServerOrigin())) {
            url = EndpointConfigManager.getServerOrigin() + proxyContextPath + path;
        } else {
            url = IdentityUtil.getServerURL(path, true, false);
        }
        url = url.replace(TENANT_DOMAIN, userDTO.getTenantDomain());

        List<JSONProvider> providers = new ArrayList<JSONProvider>();
        JSONProvider jsonProvider = new JSONProvider();
        jsonProvider.setDropRootElement(true);
        jsonProvider.setIgnoreNamespaces(true);
        jsonProvider.setValidateOutput(true);
        jsonProvider.setSupportUnwrapped(true);
        providers.add(jsonProvider);

        String toEncode = EndpointConfigManager.getAppName() + ":" + String
                .valueOf(EndpointConfigManager.getAppPassword());
        byte[] encoding = Base64.encodeBase64(toEncode.getBytes());
        String authHeader = new String(encoding, Charset.defaultCharset());
        String header = "Client " + authHeader;

        SelfUserRegistrationResource selfUserRegistrationResource = JAXRSClientFactory
                .create(url, SelfUserRegistrationResource.class, providers);
        WebClient.client(selfUserRegistrationResource).header("Authorization", header);
        Response selfRegistrationResponse = selfUserRegistrationResource.regenerateCode(selfRegistrationRequest);
        if (selfRegistrationResponse != null &&  selfRegistrationResponse.getStatus() == HttpStatus.SC_CREATED) {

      out.write("\n");
      out.write("<div class=\"ui visible info message\">\n");
      out.write("    ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle,Constants.ACCOUNT_RESEND_SUCCESS_RESOURCE));
      out.write("\n");
      out.write("</div>\n");

} else {

      out.write("\n");
      out.write("<div class=\"ui visible negative message\">\n");
      out.write("    ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle,Constants.ACCOUNT_RESEND_FAIL_RESOURCE));
      out.write("\n");
      out.write("</div>\n");

        }
    }

      out.write("\n");
      out.write("\n");
      out.write("<form class=\"ui large form\" action=\"");
      out.print(loginFormActionURL);
      out.write("\" method=\"post\" id=\"loginForm\">\n");
      out.write("    ");

        if (loginFormActionURL.equals(samlssoURL) || loginFormActionURL.equals(oauth2AuthorizeURL)) {
    
      out.write("\n");
      out.write("    <input id=\"tocommonauth\" name=\"tocommonauth\" type=\"hidden\" value=\"true\">\n");
      out.write("    ");

        }
    
      out.write("\n");
      out.write("\n");
      out.write("    ");
 if (Boolean.parseBoolean(loginFailed)) { 
      out.write("\n");
      out.write("    <div class=\"ui visible negative message\" id=\"error-msg\">");
      out.print( AuthenticationEndpointUtil.i18n(resourceBundle, errorMessage) );
      out.write("</div>\n");
      out.write("    ");
 } else if((Boolean.TRUE.toString()).equals(request.getParameter("authz_failure"))){
      out.write("\n");
      out.write("    <div class=\"ui visible negative message\" id=\"error-msg\">\n");
      out.write("        ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "unauthorized.to.login"));
      out.write("\n");
      out.write("    </div>\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("    ");
 if (!isIdentifierFirstLogin(inputType)) { 
      out.write("\n");
      out.write("        <div class=\"field\">\n");
      out.write("            <div class=\"ui fluid  icon input\">\n");
      out.write("                <input\n");
      out.write("                    type=\"text\"\n");
      out.write("                    id=\"usernameUserInput\"\n");
      out.write("                    value=\"\"\n");
      out.write("                    name=\"usernameUserInput\"\n");
      out.write("                    tabindex=\"1\"\n");
      out.write("                    placeholder=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "username"));
      out.write("\"\n");
      out.write("                    required>\n");
      out.write("\n");
      out.write("                <input id=\"username\" name=\"username\" type=\"hidden\" value=\"");
      out.print(username);
      out.write("\">\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("    ");
 } else { 
      out.write("\n");
      out.write("        <input id=\"username\" name=\"username\" type=\"hidden\" value=\"");
      out.print(username);
      out.write("\">\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("        <div class=\"field\">\n");
      out.write("            <div class=\"ui fluid right icon input\">\n");
      out.write("                <input\n");
      out.write("                    type=\"password\"\n");
      out.write("                    id=\"password\"\n");
      out.write("                    name=\"password\"\n");
      out.write("                    value=\"\"\n");
      out.write("                    autocomplete=\"off\"\n");
      out.write("                    tabindex=\"2\"\n");
      out.write("                    placeholder=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "password"));
      out.write("\">\n");
      out.write("                    <i id=\"eyeToggle\" aria-hidden=\"true\" class=\"eye icon\"></i>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("    ");

        if (reCaptchaEnabled) {
    
      out.write("\n");
      out.write("        <div class=\"field\">\n");
      out.write("            <div class=\"g-recaptcha\"\n");
      out.write("                 data-sitekey=\"");
      out.print(Encode.forHtmlContent(request.getParameter("reCaptchaKey")));
      out.write("\">\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("    ");

        }
    
      out.write("\n");
      out.write("\n");
      out.write("    ");

        String recoveryEPAvailable = application.getInitParameter("EnableRecoveryEndpoint");
        String enableSelfSignUpEndpoint = application.getInitParameter("EnableSelfSignUpEndpoint");
        Boolean isRecoveryEPAvailable = false;
        Boolean isSelfSignUpEPAvailable = false;
        String identityMgtEndpointContext = "";
        String urlEncodedURL = "";
        String urlParameters = "";

        if (StringUtils.isNotBlank(recoveryEPAvailable)) {
            isRecoveryEPAvailable = Boolean.valueOf(recoveryEPAvailable);
        } else {
            isRecoveryEPAvailable = isRecoveryEPAvailable();
        }

        if (StringUtils.isNotBlank(enableSelfSignUpEndpoint)) {
            isSelfSignUpEPAvailable = Boolean.valueOf(enableSelfSignUpEndpoint);
        } else {
            isSelfSignUpEPAvailable = isSelfSignUpEPAvailable();
        }

        if (isRecoveryEPAvailable || isSelfSignUpEPAvailable) {
            String scheme = request.getScheme();
            String serverName = request.getServerName();
            int serverPort = request.getServerPort();
            String uri = (String) request.getAttribute(JAVAX_SERVLET_FORWARD_REQUEST_URI);
            String prmstr = URLDecoder.decode(((String) request.getAttribute(JAVAX_SERVLET_FORWARD_QUERY_STRING)), UTF_8);
            String urlWithoutEncoding = scheme + "://" +serverName + ":" + serverPort + uri + "?" + prmstr;

            urlEncodedURL = URLEncoder.encode(urlWithoutEncoding, UTF_8);
            urlParameters = prmstr;

            identityMgtEndpointContext =
                    application.getInitParameter("IdentityManagementEndpointContextURL");
            if (StringUtils.isBlank(identityMgtEndpointContext)) {
                identityMgtEndpointContext = getServerURL("/accountrecoveryendpoint", true, true);
            }
        }
    
      out.write("\n");
      out.write("\n");
      out.write("    <div class=\"buttons\">\n");
      out.write("        ");
 if (isRecoveryEPAvailable) { 
      out.write("\n");
      out.write("        <div class=\"field\">\n");
      out.write("            <!--");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "forgot.username.password"));
      out.write("-->\n");
      out.write("            ");
 if (!isIdentifierFirstLogin(inputType)) { 
      out.write("\n");
      out.write("               <!-- <a id=\"usernameRecoverLink\" tabindex=\"5\" href=\"");
      out.print(getRecoverAccountUrl(identityMgtEndpointContext, urlEncodedURL, true, urlParameters));
      out.write("\">\n");
      out.write("                    ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "forgot.username"));
      out.write("\n");
      out.write("                </a>-->\n");
      out.write("                <!--");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "forgot.username.password.or"));
      out.write("-->\n");
      out.write("            ");
 } 
      out.write("\n");
      out.write("            <a id=\"passwordRecoverLink\" tabindex=\"6\" href=\"");
      out.print(getRecoverAccountUrl(identityMgtEndpointContext, urlEncodedURL, false, urlParameters));
      out.write("\">\n");
      out.write("                ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "forgot.username.password"));
      out.write("\n");
      out.write("                ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "forgot.password"));
      out.write("\n");
      out.write("            </a>\n");
      out.write("        </div>\n");
      out.write("        ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("        ");
 if (isIdentifierFirstLogin(inputType)) { 
      out.write("\n");
      out.write("        <div class=\"field\">\n");
      out.write("            <a id=\"backLink\" tabindex=\"7\" onclick=\"goBack()\">\n");
      out.write("                ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.different.account"));
      out.write("\n");
      out.write("            </a>\n");
      out.write("        </div>\n");
      out.write("        ");
 } 
      out.write("\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("    <input type=\"hidden\" name=\"sessionDataKey\" value='");
      out.print(Encode.forHtmlAttribute
            (request.getParameter("sessionDataKey")));
      out.write("'/>\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("    <div class=\"ui divider hidden\"></div>\n");
      out.write("\n");
      out.write("    <div class=\"ui two column stackable grid center\">\n");
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("        <div class=\"column mobile center aligned tablet aligned computer aligned buttons tablet no-margin-right-last-child computer no-margin-right-last-child\" style=\"display: flex; flex: 1\">\n");
      out.write("            <button\n");
      out.write("                type=\"submit\"\n");
      out.write("                onclick=\"submitCredentials(event)\"\n");
      out.write("                class=\"ui primary large button\"\n");
      out.write("                tabindex=\"4\"\n");
      out.write("                role=\"button\">\n");
      out.write("                    ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "login"));
      out.write("\n");
      out.write("            </button>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    ");
 if (Boolean.parseBoolean(loginFailed) && errorCode.equals(IdentityCoreConstants.USER_ACCOUNT_NOT_CONFIRMED_ERROR_CODE) && request.getParameter("resend_username") == null) { 
      out.write("\n");
      out.write("    <div class=\"ui divider hidden\"></div>\n");
      out.write("    <div class=\"field\">\n");
      out.write("        <div class=\"form-actions\">\n");
      out.write("            ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "no.confirmation.mail"));
      out.write("\n");
      out.write("            <a id=\"registerLink\"\n");
      out.write("                href=\"login.do?resend_username=");
      out.print(Encode.forHtml(request.getParameter("failedUsername")));
      out.write('&');
      out.print(AuthenticationEndpointUtil.cleanErrorMessages(Encode.forJava(request.getQueryString())));
      out.write("\">\n");
      out.write("                ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "resend.mail"));
      out.write("\n");
      out.write("            </a>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("    ");
      out.write("\n");
      out.write("    ");
      out.write("<style>\n");
      out.write("    .ui.icon.input>i.icon:not(.link){\n");
      out.write("        pointer-events: all;\n");
      out.write("    }\n");
      out.write("    /* align Items in login form */\n");
      out.write("    #loginForm > .stackable{\n");
      out.write("        justify-content: center;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    #loginForm > .stackable button[type='submit']{\n");
      out.write("        flex: 1;\n");
      out.write("        -webkit-box-shadow: 3px 3px 3px 3px rgba(45, 45, 45, 0.1);\n");
      out.write("        -moz-box-shadow:    3px 3px 3px 3px rgba(45, 45, 45, 0.1);\n");
      out.write("        box-shadow:         3px 3px 3px 3px rgba(45, 45, 45, 0.1);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* style for forgotPassword text */\n");
      out.write("    #passwordRecoverLink{\n");
      out.write("        color: blue;\n");
      out.write("        text-decoration: underline;\n");
      out.write("        font-size: 14px;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /*    style for header text */\n");
      out.write("    .right-segment{\n");
      out.write("        display: flex;\n");
      out.write("        justify-content: flex-end;\n");
      out.write("        margin-right: 50px;\n");
      out.write("        margin-top: 20px;\n");
      out.write("    }\n");
      out.write("    .right-segment a{\n");
      out.write("        font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n");
      out.write("        font-size: 14px;\n");
      out.write("        text-decoration: underline;\n");
      out.write("        color: blue\n");
      out.write("    }\n");
      out.write("</style>\n");
      out.write("\n");
      out.write("</form>\n");
      out.write("\n");
      out.write("                                    ");

                                }
                            }
                        }
                    
      out.write("\n");
      out.write("                    ");
if (idpAuthenticatorMapping != null &&
                            idpAuthenticatorMapping.get(Constants.RESIDENT_IDP_RESERVED_NAME) != null) { 
      out.write("\n");
      out.write("\n");
      out.write("                    ");
} 
      out.write("\n");
      out.write("                    ");

                        if ((hasLocalLoginOptions && localAuthenticatorNames.size() > 1) || (!hasLocalLoginOptions)
                                || (hasLocalLoginOptions && idpAuthenticatorMapping != null && idpAuthenticatorMapping.size() > 1)) {
                    
      out.write("\n");
      out.write("                    ");
 if (localAuthenticatorNames.contains(BASIC_AUTHENTICATOR) ||
                            localAuthenticatorNames.contains(IDENTIFIER_EXECUTOR)) { 
      out.write("\n");
      out.write("                    <div class=\"ui divider hidden\"></div>\n");
      out.write("                    <div class=\"ui horizontal divider\">\n");
      out.write("                        Or\n");
      out.write("                    </div>\n");
      out.write("                    ");
 } 
      out.write("\n");
      out.write("                    <div class=\"field\">\n");
      out.write("                        <div class=\"ui vertical ui center aligned segment form\" style=\"max-width: 300px; margin: 0 auto;\">\n");
      out.write("                            ");

                                int iconId = 0;
                                if (idpAuthenticatorMapping != null) {
                                for (Map.Entry<String, String> idpEntry : idpAuthenticatorMapping.entrySet()) {
                                    iconId++;
                                    if (!idpEntry.getKey().equals(Constants.RESIDENT_IDP_RESERVED_NAME)) {
                                        String idpName = idpEntry.getKey();
                                        boolean isHubIdp = false;
                                        if (idpName.endsWith(".hub")) {
                                            isHubIdp = true;
                                            idpName = idpName.substring(0, idpName.length() - 4);
                                        }
                            
      out.write("\n");
      out.write("                                ");
 if (isHubIdp) { 
      out.write("\n");
      out.write("                                    <div class=\"field\">\n");
      out.write("                                        <button class=\"ui labeled icon button fluid isHubIdpPopupButton\" id=\"icon-");
      out.print(iconId);
      out.write("\">\n");
      out.write("                                            ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
      out.write(" <strong>");
      out.print(Encode.forHtmlContent(idpName));
      out.write("</strong>\n");
      out.write("                                        </button>\n");
      out.write("                                        <div class=\"ui flowing popup transition hidden isHubIdpPopup\">\n");
      out.write("                                            <h5 class=\"font-large\">");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle,"sign.in.with"));
      out.write("\n");
      out.write("                                                ");
      out.print(Encode.forHtmlContent(idpName));
      out.write("</h5>\n");
      out.write("                                            <div class=\"content\">\n");
      out.write("                                                <form class=\"ui form\">\n");
      out.write("                                                    <div class=\"field\">\n");
      out.write("                                                        <input id=\"domainName\" class=\"form-control\" type=\"text\"\n");
      out.write("                                                            placeholder=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "domain.name"));
      out.write("\">\n");
      out.write("                                                    </div>\n");
      out.write("                                                    <input type=\"button\" class=\"ui button primary\"\n");
      out.write("                                                        onClick=\"javascript: myFunction('");
      out.print(idpName);
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(idpEntry.getValue());
      out.write("','domainName')\"\n");
      out.write("                                                        value=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle,"go"));
      out.write("\"/>\n");
      out.write("                                                </form>\n");
      out.write("                                            </div>\n");
      out.write("                                        </div>\n");
      out.write("                                    </div>\n");
      out.write("                                ");
 } else { 
      out.write("\n");
      out.write("                                    <div class=\"field\">\n");
      out.write("                                        <button class=\"ui icon button fluid\"\n");
      out.write("                                            onclick=\"handleNoDomain(this,\n");
      out.write("                                                '");
      out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpName)));
      out.write("',\n");
      out.write("                                                '");
      out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getValue())));
      out.write("')\"\n");
      out.write("                                            id=\"icon-");
      out.print(iconId);
      out.write("\"\n");
      out.write("                                            title=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
      out.write(' ');
      out.print(Encode.forHtmlAttribute(idpName));
      out.write("\">\n");
      out.write("                                            ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
      out.write(" <strong>");
      out.print(Encode.forHtmlContent(idpName));
      out.write("</strong>\n");
      out.write("                                        </button>\n");
      out.write("                                    </div>\n");
      out.write("                                ");
 } 
      out.write("\n");
      out.write("                            ");
 } else if (localAuthenticatorNames.size() > 0) {
                                if (localAuthenticatorNames.contains(IWA_AUTHENTICATOR)) {
                            
      out.write("\n");
      out.write("                            <div class=\"field\">\n");
      out.write("                                <button class=\"ui blue labeled icon button fluid\"\n");
      out.write("                                    onclick=\"handleNoDomain(this,\n");
      out.write("                                        '");
      out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getKey())));
      out.write("',\n");
      out.write("                                        'IWAAuthenticator')\"\n");
      out.write("                                    id=\"icon-");
      out.print(iconId);
      out.write("\"\n");
      out.write("                                    title=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
      out.write(" IWA\">\n");
      out.write("                                    ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
      out.write(" <strong>IWA</strong>\n");
      out.write("                                </button>\n");
      out.write("                            </div>\n");
      out.write("                            ");

                                }
                                if (localAuthenticatorNames.contains(X509_CERTIFICATE_AUTHENTICATOR)) {
                            
      out.write("\n");
      out.write("                            <div class=\"field\">\n");
      out.write("                                <button class=\"ui grey labeled icon button fluid\"\n");
      out.write("                                    onclick=\"handleNoDomain(this,\n");
      out.write("                                        '");
      out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getKey())));
      out.write("',\n");
      out.write("                                        'x509CertificateAuthenticator')\"\n");
      out.write("                                    id=\"icon-");
      out.print(iconId);
      out.write("\"\n");
      out.write("                                    title=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
      out.write(" X509 Certificate\">\n");
      out.write("                                    <i class=\"certificate icon\"></i>\n");
      out.write("                                    ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
      out.write(" <strong>x509 Certificate</strong>\n");
      out.write("                                </button>\n");
      out.write("                            </div>\n");
      out.write("                            ");

                                }
                                if (localAuthenticatorNames.contains(FIDO_AUTHENTICATOR)) {
                            
      out.write("\n");
      out.write("                            <div class=\"field\">\n");
      out.write("                                <button class=\"ui grey basic labeled icon button fluid\"\n");
      out.write("                                    onclick=\"handleNoDomain(this,\n");
      out.write("                                        '");
      out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getKey())));
      out.write("',\n");
      out.write("                                        'FIDOAuthenticator')\"\n");
      out.write("                                    id=\"icon-");
      out.print(iconId);
      out.write("\"\n");
      out.write("                                    title=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
      out.write(" FIDO\">\n");
      out.write("                                    <i class=\"usb icon\"></i>\n");
      out.write("                                    <img src=\"libs/theme/assets/images/icons/fido-logo.png\" height=\"13px\" /> Key\n");
      out.write("                                </button>\n");
      out.write("                            </div>\n");
      out.write("                            ");

                                        }
                                if (localAuthenticatorNames.contains("totp")) {
                            
      out.write("\n");
      out.write("                            <div class=\"field\">\n");
      out.write("                                <button class=\"ui brown labeled icon button fluid\"\n");
      out.write("                                    onclick=\"handleNoDomain(this,\n");
      out.write("                                        '");
      out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getKey())));
      out.write("',\n");
      out.write("                                        'totp')\"\n");
      out.write("                                    id=\"icon-");
      out.print(iconId);
      out.write("\"\n");
      out.write("                                    title=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
      out.write(" TOTP\">\n");
      out.write("                                    <i class=\"key icon\"></i> ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
      out.write(" <strong>TOTP</strong>\n");
      out.write("                                </button>\n");
      out.write("                            </div>\n");
      out.write("                            ");

                                        }
                                    }

                                }
                            } 
      out.write("\n");
      out.write("                            </div>\n");
      out.write("                        </div>\n");
      out.write("                    ");
 } 
      out.write("\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("    </main>\n");
      out.write("\n");
      out.write("    <!-- product-footer -->\n");
      out.write("    ");

        File productFooterFile = new File(getServletContext().getRealPath("extensions/product-footer.jsp"));
        if (productFooterFile.exists()) {
    
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/product-footer.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } else { 
      out.write("\n");
      out.write("        ");
      out.write("\n");
      out.write("\n");
      out.write("<!-- localize.jsp MUST already be included in the calling script -->\n");
      out.write("\n");
      out.write("\n");
      out.write("<!-- footer -->\n");
      out.write("<footer class=\"footer\" style=\"text-align: center\">\n");
      out.write("    <div class=\"container-fluid\">\n");
      out.write("        <p>");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "welcome"));
      out.write(" &copy;\n");
      out.write("            <script>document.write(new Date().getFullYear());</script>\n");
      out.write("        </p>\n");
      out.write("    </div>\n");
      out.write("</footer>\n");
      out.write("\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("    <!-- footer -->\n");
      out.write("    ");

        File footerFile = new File(getServletContext().getRealPath("extensions/footer.jsp"));
        if (footerFile.exists()) {
    
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/footer.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } else { 
      out.write("\n");
      out.write("        ");
      out.write("\n");
      out.write("\n");
      out.write("<script src=\"libs/theme/semantic.min.js\"></script>\n");
      out.write("\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("    <script>\n");
      out.write("        function checkSessionKey() {\n");
      out.write("            $.ajax({\n");
      out.write("                type: \"GET\",\n");
      out.write("                url: \"/logincontext?sessionDataKey=\" + getParameterByName(\"sessionDataKey\") + \"&relyingParty=\" + getParameterByName(\"relyingParty\") + \"&tenantDomain=\" + getParameterByName(\"tenantDomain\"),\n");
      out.write("                success: function (data) {\n");
      out.write("                    if (data && data.status == 'redirect' && data.redirectUrl && data.redirectUrl.length > 0) {\n");
      out.write("                        window.location.href = data.redirectUrl;\n");
      out.write("                    }\n");
      out.write("                },\n");
      out.write("                cache: false\n");
      out.write("            });\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function getParameterByName(name, url) {\n");
      out.write("            if (!url) {\n");
      out.write("                url = window.location.href;\n");
      out.write("            }\n");
      out.write("            name = name.replace(/[\\[\\]]/g, '\\$&');\n");
      out.write("            var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n");
      out.write("            results = regex.exec(url);\n");
      out.write("            if (!results) return null;\n");
      out.write("            if (!results[2]) return \"\";\n");
      out.write("            return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        $(document).ready(function () {\n");
      out.write("            $('.main-link').click(function () {\n");
      out.write("                $('.main-link').next().hide();\n");
      out.write("                $(this).next().toggle('fast');\n");
      out.write("                var w = $(document).width();\n");
      out.write("                var h = $(document).height();\n");
      out.write("                $('.overlay').css(\"width\", w + \"px\").css(\"height\", h + \"px\").show();\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            $('.overlay').click(function () {\n");
      out.write("                $(this).hide();\n");
      out.write("                $('.main-link').next().hide();\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            ");

                if(reCaptchaEnabled) {
            
      out.write("\n");
      out.write("                var error_msg = $(\"#error-msg\");\n");
      out.write("\n");
      out.write("                $(\"#loginForm\").submit(function (e) {\n");
      out.write("                    var resp = $(\"[name='g-recaptcha-response']\")[0].value;\n");
      out.write("                    if (resp.trim() == '') {\n");
      out.write("                        error_msg.text(\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle,"please.select.recaptcha"));
      out.write("\");\n");
      out.write("                        error_msg.show();\n");
      out.write("                        $(\"html, body\").animate({scrollTop: error_msg.offset().top}, 'slow');\n");
      out.write("                        return false;\n");
      out.write("                    }\n");
      out.write("                    return true;\n");
      out.write("                });\n");
      out.write("            ");

                }
            
      out.write("\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        function myFunction(key, value, name) {\n");
      out.write("            var object = document.getElementById(name);\n");
      out.write("            var domain = object.value;\n");
      out.write("\n");
      out.write("\n");
      out.write("            if (domain != \"\") {\n");
      out.write("                document.location = \"");
      out.print(commonauthURL);
      out.write("?idp=\" + key + \"&authenticator=\" + value +\n");
      out.write("                        \"&sessionDataKey=");
      out.print(Encode.forUriComponent(request.getParameter("sessionDataKey")));
      out.write("&domain=\" +\n");
      out.write("                        domain;\n");
      out.write("            } else {\n");
      out.write("                document.location = \"");
      out.print(commonauthURL);
      out.write("?idp=\" + key + \"&authenticator=\" + value +\n");
      out.write("                        \"&sessionDataKey=");
      out.print(Encode.forUriComponent(request.getParameter("sessionDataKey")));
      out.write("\";\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function handleNoDomain(elem, key, value) {\n");
      out.write("            var linkClicked = \"link-clicked\";\n");
      out.write("            if ($(elem).hasClass(linkClicked)) {\n");
      out.write("                console.warn(\"Preventing multi click.\")\n");
      out.write("            } else {\n");
      out.write("                $(elem).addClass(linkClicked);\n");
      out.write("                ");

                String multiOptionURIParam = "";
                if (localAuthenticatorNames.size() > 1 || idpAuthenticatorMapping != null && idpAuthenticatorMapping.size() > 1) {
                    multiOptionURIParam = "&multiOptionURI=" + Encode.forUriComponent(request.getRequestURI() +
                        (request.getQueryString() != null ? "?" + request.getQueryString() : ""));
                }
                
      out.write("\n");
      out.write("                document.location = \"");
      out.print(commonauthURL);
      out.write("?idp=\" + key + \"&authenticator=\" + value +\n");
      out.write("                    \"&sessionDataKey=");
      out.print(Encode.forUriComponent(request.getParameter("sessionDataKey")));
      out.write("\" +\n");
      out.write("                    \"");
      out.print(multiOptionURIParam);
      out.write("\";\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        window.onunload = function(){};\n");
      out.write("\n");
      out.write("        function changeUsername (e) {\n");
      out.write("            document.getElementById(\"changeUserForm\").submit();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        $('.isHubIdpPopupButton').popup({\n");
      out.write("            popup: '.isHubIdpPopup',\n");
      out.write("            on: 'click',\n");
      out.write("            position: 'top left',\n");
      out.write("            delay: {\n");
      out.write("                show: 300,\n");
      out.write("                hide: 800\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // toggle click password\n");
      out.write("        $('#eyeToggle').click(function(){\n");
      out.write("            let x = document.getElementById(\"password\");\n");
      out.write("            if (x.type === \"password\") {\n");
      out.write("                x.type = \"text\";\n");
      out.write("                $(this).addClass(\"slash\");\n");
      out.write("            } else {\n");
      out.write("                x.type = \"password\";\n");
      out.write("                $(this).removeClass(\"slash\");\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("    </script>\n");
      out.write("\n");
      out.write("    ");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
